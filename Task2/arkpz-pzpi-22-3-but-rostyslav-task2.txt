Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи №2
з дисципліни  «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ»





Виконав ст. гр ПЗПІ-22-3
Бут Ростислав Сергійович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович










Харків 2024

1 МЕТА РОБОТИ
Метою лабораторної роботи є розробка серверної частини програмної системи для управління корпоративними ресурсами у коворкінгах, включаючи базу даних та API. Робота передбачає створення структури бази даних, яка забезпечує зберігання інформації про користувачів, ресурси, витрати та бюджети. Необхідно реалізувати REST API для взаємодії клієнтів із сервером, що підтримує авторизацію, створення витрат, аналітику та управління бюджетами. Також потрібно створити специфікацію API, протестувати функціональність та задокументувати результати.

2 ХІД РОБОТИ

У процесі виконання лабораторної роботи №2 було виконано низку завдань, які охоплюють проектування, розробку, тестування та документування серверної частини системи. Нижче наведено детальний опис виконаних етапів, структурованих за логічними пунктами, із зазначенням відповідних додатків.
2.1 Розробка будови програмної системи
Було спроектовано серверну частину системи на основі Django та Django REST Framework. Система включає базу даних SQLite, REST API для взаємодії з клієнтами та адмін-панель для управління даними. Визначено основні функції: авторизація (MF1), створення та перегляд витрат (MF2), аналітика витрат (MF6) та управління бюджетами (MF7). Створено UML діаграму прецедентів, яка відображає взаємодію користувачів із системою (Додаток А). Для документування API використано Swagger UI, інтегроване через drf-yasg (Додаток Г).
2.2 Проектування бази даних
Розроблено ER діаграму даних, яка включає сутності: UserProfile, Resource, Expense, Budget (Додаток Б). Сутність UserProfile пов’язана з User для авторизації, Expense об’єднує користувачів і ресурси для витрат, а Budget відповідає за корпоративні бюджети. На основі ER діаграми створено діаграму структури бази даних із таблицями та їх зв’язками (Додаток В). База даних реалізована в SQLite через Django ORM, а міграції застосовані автоматично (файл: api/migrations/0001_initial.py).
2.3 Розробка функцій роботи з базою даних
Функції роботи з базою даних реалізовано через Django ORM. Моделі (api/models.py) включають методи для автоматичного розрахунку витрат у Expense (метод save). Серіалізатори (api/serializers.py) забезпечують перетворення даних для API. Логіка CRUD-операцій реалізована у ViewSet класах (api/views.py), що підтримують створення, читання, оновлення та видалення записів (Додаток Д). Наприклад, ExpenseViewSet обробляє запити для MF2, а analytics_view — для MF6.
2.4 Розробка та тестування API
Розроблено REST API з ендпоінтами:
POST /api/login/ (MF1) для авторизації.
POST /api/expenses/, GET /api/expenses/ (MF2) для ресурсів.
GET /api/analytics/ (MF6) для аналітики.
POST /api/budgets/, GET /api/budgets/ (MF7) для бюджетів.
API задокументовано через Swagger (файл: coworking_system/urls.py, Додаток Г). Тестування проведено через Swagger UI (http://127.0.0.1:8000/swagger/) та curl. Виявлено та виправлено помилки: 403 Forbidden (відсутність автентифікації), 400 Bad Request (некоректні ID), проблема "No parameters" (вирішена через @parser_classes([JSONParser]) у api/views.py). Логи сервера підтверджують успішні запити (наприклад, [22/May/2025 19:38:34] "POST /api/expenses/ HTTP/1.1" 201 128).


ВИСНОВКИ
У рамках лабораторної роботи розроблено серверну частину системи управління корпоративними ресурсами у коворкінгах. Створено базу даних SQLite із таблицями для користувачів, ресурсів, витрат і бюджетів, що відповідає ER діаграмі та діаграмі структури. Реалізовано REST API з підтримкою авторизації, управління витратами, аналітики та бюджетів, задокументоване через Swagger UI. Успішно протестовано всі функції (MF1, MF2, MF6, MF7). Система готова до комерційного використання після додавання JWT-автентифікації та захисту від брутфорсу. Робота виконана повністю, усі вимоги лабораторної дотримані.


ДОДАТОК А
UML діаграма прецедентів

Рисунок А.1 – Діаграма прецедентів авторизації

Рисунок А.2 – Діаграма прецедентів управління витратами

Рисунок А.3 – Діаграма прецедентів аналітики та бюджетів


ДОДАТОК Б
Модель «сутність — зв'язок»

Рисунок Б.1 – Модель «сутність — зв'язок»


ДОДАТОК В
Діаграма структури бази даних

Рисунок В.1 – Діаграма структури бази даних


ДОДАТОК Г
Специфікація прикладного програмного інтерфейсу

openapi: 3.0.0
info:
  title: Coworking Management API
  description: API для управління корпоративними ресурсами у коворкінгах
  version: 1.0.0
components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: cookie
      name: sessionid
      description: Сесійна авторизація Django
  schemas:
    User:
      type: object
      required: [id, username, email, corporate_account_id]
      properties:
        id: { type: integer }
        username: { type: string }
        email: { type: string }
        corporate_account_id: { type: integer }
    Resource:
      type: object
      required: [id, name, cost_per_hour]
      properties:
        id: { type: integer }
        name: { type: string }
        cost_per_hour: { type: number }
    Expense:
      type: object
      required: [id, user_id, resource_id, start_time, end_time, total_cost]
      properties:
        id: { type: integer }
        user_id: { type: integer }
        resource_id: { type: integer }
        start_time: { type: string, format: date-time }
        end_time: { type: string, format: date-time }
        total_cost: { type: number }
    Budget:
      type: object
      required: [id, corporate_account_id, limit_amount]
      properties:
        id: { type: integer }
        corporate_account_id: { type: integer }
        limit_amount: { type: number }
security:
  - SessionAuth: []
paths:
  /api/login/:
    post:
      summary: Авторизація користувача
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string, example: "user@example.com" }
                password: { type: string, example: "password123" }
      responses:
        200:
          description: Успішна авторизація
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Login successful" }
        401:
          description: Невірний логін або пароль
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Invalid credentials" }
  /api/users/:
    get:
      summary: Отримати список користувачів
      tags: [Users]
      responses:
        200:
          description: Список користувачів
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Створити користувача
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Користувач створений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/expenses/:
    get:
      summary: Отримати список витрат
      tags: [Expenses]
      responses:
        200:
          description: Список витрат
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
    post:
      summary: Створити витрату
      tags: [Expenses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: { type: integer }
                resource_id: { type: integer }
                start_time: { type: string, format: date-time }
                end_time: { type: string, format: date-time }
      responses:
        201:
          description: Витрата створена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
  /api/analytics/:
    get:
      summary: Отримати аналітику витрат
      tags: [Analytics]
      responses:
        200:
          description: Аналітика витрат
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_cost: { type: number }
  /api/budgets/:
    get:
      summary: Отримати список бюджетів
      tags: [Budgets]
      responses:
        200:
          description: Список бюджетів
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'
    post:
      summary: Створити бюджет
      tags: [Budgets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                corporate_account_id: { type: integer }
                limit_amount: { type: number }
      responses:
        201:
          description: Бюджет створений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'


ДОДАТОК Д
Код взаємодії між сервером, клієнтом та базою даних

Логіка взаємодії з базою даних:
1  from django.db import models
2  from django.contrib.auth.models import User
3  from django.utils import timezone
4
5  class UserProfile(models.Model):
6      user = models.OneToOneField(User, on_delete=models.CASCADE)
7      corporate_account_id = models.IntegerField(unique=True)
8
9      def __str__(self):
10         return f"{self.user.username} (Account {self.corporate_account_id})"
11
12 class Resource(models.Model):
13     name = models.CharField(max_length=100)
14     cost_per_hour = models.FloatField()
15
16     def __str__(self):
17         return self.name
18
19 class Expense(models.Model):
20     user = models.ForeignKey(User, on_delete=models.CASCADE)
21     resource = models.ForeignKey(Resource, on_delete=models.CASCADE)
22     start_time = models.DateTimeField()
23     end_time = models.DateTimeField()
24     total_cost = models.FloatField()
25
26     def save(self, *args, **kwargs):
27         # Автоматичний розрахунок витрат (MF2)
28         if self.start_time and self.end_time:
29             time_diff = (self.end_time - self.start_time).total_seconds() / 3600
30             self.total_cost = time_diff * self.resource.cost_per_hour
31         super().save(*args, **kwargs)
32
33     def __str__(self):
34         return f"{self.user.username} - {self.resource.name}"
35
36 class Budget(models.Model):
37     corporate_account_id = models.IntegerField()
38     limit_amount = models.FloatField()
39
40     def __str__(self):
41         return f"Budget {self.id} for account {self.corporate_account_id}"

1  from rest_framework import serializers
2  from django.contrib.auth.models import User
3  from .models import UserProfile, Resource, Expense, Budget
4
5  class UserProfileSerializer(serializers.ModelSerializer):
6      username = serializers.CharField(source='user.username')
7      email = serializers.EmailField(source='user.email')
8
9      class Meta:
10         model = UserProfile
11         fields = ['id', 'username', 'email', 'corporate_account_id']
12
13 class ResourceSerializer(serializers.ModelSerializer):
14     class Meta:
15         model = Resource
16         fields = ['id', 'name', 'cost_per_hour']
17
18 class ExpenseSerializer(serializers.ModelSerializer):
19     class Meta:
20         model = Expense
21         fields = ['id', 'user', 'resource', 'start_time', 'end_time', 'total_cost']
22
23 class BudgetSerializer(serializers.ModelSerializer):
24     class Meta:
25         model = Budget
26         fields = ['id', 'corporate_account_id', 'limit_amount']

Логіка взаємодії з клієнтом:
1  from rest_framework import viewsets, status
2  from rest_framework.decorators import api_view, permission_classes, parser_classes
3  from rest_framework.parsers import JSONParser
4  from rest_framework.response import Response
5  from rest_framework.permissions import AllowAny, IsAuthenticated
6  from django.contrib.auth import authenticate, login
7  from drf_yasg.utils import swagger_auto_schema
8  from drf_yasg import openapi
9
10 from .models import UserProfile, Resource, Expense, Budget
11 from .serializers import (
12     UserProfileSerializer,
13     ResourceSerializer,
14     ExpenseSerializer,
15     BudgetSerializer,
16 )
17
18 # --- Login View ---
19 @swagger_auto_schema(
20     method='post',
21     request_body=openapi.Schema(
22         type=openapi.TYPE_OBJECT,
23         required=['username', 'password'],
24         properties={
25             'username': openapi.Schema(type=openapi.TYPE_STRING, description='Ім’я користувача'),
26             'password': openapi.Schema(type=openapi.TYPE_STRING, description='Пароль'),
27         },
28     ),
29     responses={
30         200: openapi.Response(
31             description='Успішний вхід',
32             schema=openapi.Schema(
33                 type=openapi.TYPE_OBJECT,
34                 properties={'message': openapi.Schema(type=openapi.TYPE_STRING)}
35             )
36         ),
37         401: openapi.Response(description='Невірні облікові дані'),
38     }
39 )
40 @api_view(['POST'])
41 @permission_classes([AllowAny])
42 @parser_classes([JSONParser])
43 def login_view(request):
44     username = request.data.get('username')
45     password = request.data.get('password')
46
47     user = authenticate(request, username=username, password=password)
48     if user is not None:
49         login(request, user)
50         return Response({'message': 'Login successful'}, status=status.HTTP_200_OK)
51     else:
52         return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
53
54 # --- ViewSets for Models ---
55 class UserProfileViewSet(viewsets.ModelViewSet):
56     queryset = UserProfile.objects.all()
57     serializer_class = UserProfileSerializer
58     permission_classes = [IsAuthenticated]
59
60 class ResourceViewSet(viewsets.ModelViewSet):
61     queryset = Resource.objects.all()
62     serializer_class = ResourceSerializer
63     permission_classes = [IsAuthenticated]
64
65 class ExpenseViewSet(viewsets.ModelViewSet):
66     queryset = Expense.objects.all()
67     serializer_class = ExpenseSerializer
68     permission_classes = [IsAuthenticated]
69
70 class BudgetViewSet(viewsets.ModelViewSet):
71     queryset = Budget.objects.all()
72     serializer_class = BudgetSerializer
73     permission_classes = [IsAuthenticated]
74
75 # --- Analytics View ---
76 @swagger_auto_schema(
77     method='get',
78     responses={
79         200: openapi.Response(
80             description='Сума витрат',
81             schema=openapi.Schema(
82                 type=openapi.TYPE_OBJECT,
83                 properties={'total_cost': openapi.Schema(type=openapi.TYPE_NUMBER)}
84             )
85         )
86     }
87 )
88 @api_view(['GET'])
89 @permission_classes([IsAuthenticated])
90 def analytics_view(request):
91     expenses = Expense.objects.all()
92     total_cost = sum(expense.total_cost for expense in expenses)
93     return Response({'total_cost': total_cost}, status=status.HTTP_200_OK)

ДОДАТОК Е
Посилання на відеозвіт

     Посилання: https://youtu.be/0RUhdYigxgE

