Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Катедра програмної інженерії




ЗВІТ
до лабораторної роботи №3
з дисципліни  «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»



Виконав
ст. гр. ПЗПІ-22-3
Бут Ростислав Сергійович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович



Харків 2024
1 МЕТА РОБОТИ

     Метою лабораторної роботи №3 є створення серверної частини програмної системи для управління коворкінг-простором. Завдання полягає в розробці бізнес-логіки для управління користувачами, ресурсами, витратами та бюджетами, а також функцій адміністрування для створення та видалення користувачів із логуванням дій. Необхідно реалізувати ці компоненти через REST API на базі Django, перевірити їхню роботу та завантажити код у GitHub-репозиторій у гілку main 
     
2 ХІД РОБОТИ

     	Для виконання лабораторної роботи було створено Django-проєкт coworking_system із додатком api у директорії D:\АтаРК\task3. Спочатку налаштували віртуальне середовище та встановили залежності, такі як Django, Django REST Framework, drf-yasg та rest_framework_simplejwt. У файлі settings.py підключили REST Framework, JWT-авторизацію та Swagger для документації API. Це забезпечило базову структуру для реалізації бізнес-логіки та адміністрування.
     Бізнес-логіка серверної частини була розроблена через моделі та API-ендпоінти. У файлі api/models.py створено моделі: UserProfile для профілів користувачів із унікальним corporate_account_id, Resource для ресурсів коворкінгу з назвою та вартістю за годину, Expense для записів витрат із логікою перевірки доступності ресурсу та бюджету, а також Budget для управління фінансовими лімітами. Модель Expense містить методи check_availability() та check_budget(), які реалізують функціональні вимоги MF2 (перевірка доступності ресурсу в заданий час) та MF7 (контроль витрат у межах бюджету). У api/views.py та api/urls.py налаштовано REST API для створення, перегляду та управління цими сутностями, забезпечуючи доступ до них через ендпоінти, такі як /api/resources/ та /api/expenses/. Для авторизації (MF1) використано JWT, що дозволяє обмежувати доступ до даних залежно від ролі користувача.
     Функції адміністрування реалізовано через адмін-панель та спеціальні API-ендпоінти. У api/admin.py створено кастомний клас UserProfileAdmin, який логує дії створення та видалення профілів користувачів у модель ActionLog. Ця модель, визначена в api/models.py, фіксує дії адміністратора, включаючи ім’я, опис дії та час. У api/views.py додано ендпоінти create_user (/api/admin/users/create/) та delete_user (/api/admin/users/delete/<user_id>/), які дозволяють адміністратору створювати та видаляти користувачів, записуючи кожну дію в ActionLog. Доступ до цих ендпоінтів обмежено роллю адміністратора через IsAdminUser.
Програмна реалізація бізнес-логіки та функцій адміністрування виконана через інтеграцію моделей, серіалізаторів, представлень та маршрутів. У api/serializers.py створено серіалізатори для всіх моделей, що забезпечують коректну передачу даних у JSON-форматі. Ендпоінт /api/login/ реалізовано для авторизації користувачів із видачею JWT-токенів. Swagger-документація, доступна за адресою /swagger/, описує всі ендпоінти, включаючи їхні параметри та відповіді. Це дозволило протестувати API та переконатися в коректності реалізації.
Перевірка роботи серверної частини проводилася через Swagger та адмін-панель. У Swagger тестувалися ендпоінти: створення користувача адміністратором, додавання ресурсів та витрат, перегляд аналітики витрат (/api/analytics/), а також перегляд логів дій (/api/action-logs/). Перевірено бізнес-логіку: бронювання ресурсу блокується, якщо він зайнятий (MF2), а витрати не дозволяються при перевищенні бюджету (MF7). Адмін-панель протестовано на створення та видалення користувачів, із підтвердженням записів у ActionLog. Усі тести підтвердили коректну роботу системи.
     Код основних файлів в яких відображено бізнес логіку серверної частини програмної системи та  функції адміністрування серверної частини програмної системи зображені в додатку.

ВИСНОВКИ

     Розроблено бізнес-логіку для управління ресурсами, витратами та бюджетами з урахуванням вимог. Реалізовано функції адміністрування для створення та видалення користувачів із логуванням дій. Створено REST API з JWT-авторизацією та Swagger-документацією. Робота серверної частини перевірена через Swagger та адмін-панель, а код успішно завантажено в GitHub. Система готова до розширення, зокрема для інтеграції з IoT у наступній лабораторній роботі.

ДОДАТОК А

Моделі які містять бізнес-логіку для перевірки доступності ресурсів та бюджетів.  
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    corporate_account_id = models.IntegerField(unique=True)

    def __str__(self):
        return f"{self.user.username} (Account {self.corporate_account_id})"

class Resource(models.Model):
    name = models.CharField(max_length=100)
    cost_per_hour = models.FloatField()

    def __str__(self):
        return self.name

class Expense(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    resource = models.ForeignKey(Resource, on_delete=models.CASCADE)
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()
    total_cost = models.FloatField()

    def check_availability(self):
        # Перевірка, чи ресурс вільний у вказаний час (MF2)
        conflicts = Expense.objects.filter(
            resource=self.resource,
            start_time__lt=self.end_time,
            end_time__gt=self.start_time
        ).exclude(id=self.id)
        return not conflicts.exists()

    def check_budget(self):
        # Перевірка, чи витрата не перевищує бюджет (MF7)
        profile = UserProfile.objects.get(user=self.user)
        budget = Budget.objects.filter(corporate_account_id=profile.corporate_account_id).first()
        if not budget:
            return True  # Немає бюджету — дозволяємо
        total_expenses = Expense.objects.filter(
            user__userprofile__corporate_account_id=profile.corporate_account_id
        ).exclude(id=self.id).aggregate(models.Sum('total_cost'))['total_cost__sum'] or 0
        return total_expenses + self.total_cost <= budget.limit_amount

    def save(self, *args, **kwargs):
        # Перевірки перед збереженням
        if not self.check_availability():
            raise ValueError("Resource is not available at this time")
        if not self.check_budget():
            raise ValueError("Expense exceeds budget limit")
        # Розрахунок витрат
        if self.start_time and self.end_time:
            time_diff = (self.end_time - self.start_time).total_seconds() / 3600
            self.total_cost = time_diff * self.resource.cost_per_hour
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.user.username} - {self.resource.name}"

class Budget(models.Model):
    corporate_account_id = models.IntegerField()
    limit_amount = models.FloatField()

    def __str__(self):
        return f"Budget {self.id} for account {self.corporate_account_id}"

class ActionLog(models.Model):
    admin = models.ForeignKey(User, on_delete=models.CASCADE)
    action = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.admin.username} - {self.action} at {self.timestamp}"

API-ендпоінти для бізнес-логіки (управління ресурсами, витратами, аналітика) та адміністрування (створення/видалення користувачів)

Налаштування адмін-панелі з логуванням дій створення та видалення профілів користувачів.


     
